---
interface Props {
  icon: string
  color: 'red' | 'teal'
  position: string
  orientation?: 'horizontal' | 'vertical'
}

const { icon, color, position, orientation = 'horizontal' } = Astro.props
---

<div class:list={['card', `card-${color}`, orientation]}>
  <i class:list={['card-icon', 'fa-4x', 'fa-thin', `fa-${icon}`]}></i>
  <div>
    <slot />
  </div>
</div>

<script>
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        entry.target.classList.toggle('show', entry.isIntersecting)

        if (entry.isIntersecting) {
          observer.unobserve(entry.target)
        }
      })
    },
    {
      threshold: 0.5,
    }
  )

  document.querySelectorAll('.card').forEach((card) => {
    observer.observe(card)
  })
</script>

<style define:vars={{ position }}>
  .card {
    display: grid;
    grid-template-columns: 6rem 1fr;
    grid-area: var(--position);
    gap: 2rem;
    align-items: center;
    padding: 2rem;
    background: var(--clr-gray-100);
    border-radius: 1rem;
    border: 1px solid var(--clr-gray-200);
    box-shadow: var(--shadow);

    transition:
      opacity 200ms,
      transform 200ms;
  }

  .card:not(.show) {
    opacity: 0;
    transform: translateY(2rem) scale(0.8);
  }

  .card.vertical {
    grid-template-columns: 1fr;
    align-items: start;
    justify-items: center;
    text-align: center;
  }

  .card-icon {
    place-self: center;
  }

  .card-red .card-icon {
    color: var(--clr-accent-r);
  }
  .card-teal .card-icon {
    color: var(--clr-accent-t);
  }

  @media (max-width: 1240px) {
    .card {
      grid-template-columns: 1fr;
      align-items: start;
      justify-items: center;
      padding-block: 2rem;
      padding-inline: 1rem;
    }
  }
</style>
